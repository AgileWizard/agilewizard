// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.4.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace AgileWizard.IntegrationTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ResourceListsAtHomepageFeature : Xunit.IUseFixture<ResourceListsAtHomepageFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "HomeList.feature"
#line hidden
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Resource lists at Homepage", "In order to see resources of most attention\r\nAs a visitor\r\nI want to see top like" +
                    ", top hit and latest resource on Homepage", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public virtual void SetFixture(ResourceListsAtHomepageFeature.FixtureData fixtureData)
        {
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Resource lists at Homepage")]
        [Xunit.TraitAttribute("Description", "top like resource list")]
        public virtual void TopLikeResourceList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("top like resource list", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("there are 2 pages of resources");
#line 9
 testRunner.When("I wait for non-stale data");
#line 10
 testRunner.When("I see top like resources");
#line 11
 testRunner.Then("there will be 3 resources on the page");
#line 12
 testRunner.And("order by like desc");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Resource lists at Homepage")]
        [Xunit.TraitAttribute("Description", "top hit resource list")]
        public virtual void TopHitResourceList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("top hit resource list", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("there are 2 pages of resources");
#line 17
 testRunner.When("I wait for non-stale data");
#line 18
 testRunner.When("I see top hit resources");
#line 19
 testRunner.Then("there will be 3 resources on the page");
#line 20
 testRunner.And("order by hit desc");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Resource lists at Homepage")]
        [Xunit.TraitAttribute("Description", "latest resource list")]
        public virtual void LatestResourceList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("latest resource list", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("there are 2 pages of resources");
#line 25
 testRunner.When("I wait for non-stale data");
#line 26
 testRunner.When("I see the latest resources");
#line 27
 testRunner.Then("there will be 3 resources on the page");
#line 28
 testRunner.And("order by create time desc");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ResourceListsAtHomepageFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ResourceListsAtHomepageFeature.FeatureTearDown();
            }
        }
    }
}
#endregion
